 11章 この章の理解度チェック
1. 次の表は、Webアプリケーションの脆弱性についてまとめたものです。空欄①〜⑫を埋めて、表を完成させてください。
名前/概要
①(XSS)/エンドユーザからの入力などによって生成されるページで②の漏れなどが原因で、不正なスクリプトが実行されてしまう脆弱性
③/④命令に不正なパラメータを引き渡すことで、本来、開発者が意図していなかった④命令が生成/実行されてしまう脆弱性
⑤/サイトに攻撃用のスクリプトを仕込んでおくことでアクセスしてきたユーザに意図せぬ操作を強制させる攻撃
⑥/本来想定していたパスを遡って、自由にファイルを読み書きされてします脆弱性
⑦/メールヘッダに不正なヘッダ情報を混入させることで、⑧などを送信させる攻撃
⑨/⑩を盗聴することで、セッションそのものを乗っ取る攻撃
インクルード攻撃/⑪クラスや関数の名前をグループ化するための仕組み
⑫/⑫関数に対して不正なコードを引き渡す攻撃

2. 次の文章は、脆弱性対策について述べたものです。正しいものには◯、謝っているものには×をつけてください。
(1) XSS脆弱性を回避する基本は、スーパーグローバル変数の内容をエスケープ処理する
(2) 全ての出力をHTMLエスケープすれば、XSS脆弱性は必ず防げる
(3) SQLインジェクションを回避する最良の方法は、個々の値を手動でSQLエスケープすることである
(4) OSコマンドはパフォーマンス的に有利なので、積極的に利用するとよい
(5) CSRF攻撃は、ページに対して認証を施しておけば防げる
(6) パストラバーサル脆弱性を防ぐ基本は、ファイルパスをクライアント/サーバ間で直接に受け渡ししないことである
(7) 入力値の検証をしていれば、セキュリティ的な対策が不十分でも安心である
(8) 検証処理をサーバー/クライアント双方で実装するのは非効率なのでクライアントサイド処理で一元化するのが望ましい


[1.回答]
① クロスサイトスクリプティング
② エスケープ処理
③ SQLインジェクション
④ SQL
⑤ CSRF
⑥ パストラバーサル
⑦ メールヘッダインジェクション
⑧ 迷惑メール
⑨ セッションハイジャック
⑩ セッションID
⑪ require,require_once
⑫ eval

[2.回答]
(1) × スーパーグローバル変数の内容ではなく全ての動的に生成される値
(2) × JavaScript擬似プロトコルによって埋め込まれたコードでの攻撃など防げないケースがある
(3) × PDOのプレイスホルダを利用するとPDOStatementクラスが内部でエスケープ処理を行ってくれるので個々でエスケープするよりよい
(4) × OSコマンドはライブラリなどで代替できるのでできるだけ利用するべきではない
(5) × 認証済みの状態で別ページにアクセスしてしまう方法があるのでページに対する認証では防げない
(6) ◯
(7) × 入力値の検証だけで安心せず、他のセキュリティ対策とあわせ複数の防御対策を備えるべきである
(8) × クライアントサイドのほうが値の改ざんや検証のすり抜けが容易なのでサーバサイドで検証処理をする